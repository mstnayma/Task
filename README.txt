TaskFlow Parser

The TaskFlow Parser reads and checks task descriptions written in the TaskFlow language. 
It makes sure the syntax is correct, creates an Abstract Syntax Tree (AST) for valid inputs, and gives clear error messages for invalid ones. 
The parser can handle expressions, control statements, and nested structures reliably.

TaskFlow CFG: 
S -> DO TASK_NAME IF STATEMENT COMPLETE
TASK_NAME -> Task1 | Task2 | Task3 | Task4 |
STATEMENT -> IF IDENTIFIER COMPARATOR IDENTIFIER
IF -> "IF"
IDENTIFIER -> [a-zA-Z_][a-zA-Z0-9_]*
COMPARATOR -> "==" | "!=" | "<" | ">"
COMPLETE -> "COMPLETE"

Non-terminal symbols:

S (Start symbol)
TASK_NAME
STATEMENT
IF
IDENTIFIER

Terminal symbols: DO, TASK_NAME, IF, COMPLETE, IDENTIFIER, COMPARATOR

Parsing Algorithm: 
I have developed a recursive descent parser to parse the task descriptions and generate an Abstract Syntax Tree (AST). 
It processes tokens generated by the scanner and checks for correctness according to the CFG, outputs an Abstract Syntax Tree (AST) if the input is valid, and provides detailed error messages if the input is invalid.

Key Features:
The parser handles syntax errors and provides meaningful error messages when the input doesn't match the expected structure.
If the input is syntactically correct, the parser outputs the corresponding AST.

How It Works
1. Tokenization
The scanner.py processes the raw input to produce a list of tokens. Tokens are saved in tokens.txt.

2. Parsing
The parser.py reads the tokens and checks their syntax against the TaskFlow CFG. If the syntax is valid, it generates an AST. Errors are reported for invalid input.

3. Sample Input Programs
Here are five sample input programs demonstrating different syntactic structures, expressions, control statements, and error handling:

Sample 1: Valid Program
DO Task1 IF a < b COMPLETE
Expected AST:
{
  "DO": {
    "task_name": "Task1",
    "if_statement": {
      "if": "IF",
      "identifier1": "a",
      "comparator": "<",
      "identifier2": "b"
    }
  }
}

Sample 2: Task2 with Greater-Than Comparator
DO Task2 IF c > d COMPLETE
Expected AST:
{
  "DO": {
    "task_name": "Task2",
    "if_statement": {
      "if": "IF",
      "identifier1": "c",
      "comparator": ">",
      "identifier2": "d"
    }
  }
}

Sample 3: Missing COMPLETE
DO Task3 IF a == b
Expected Error:
SyntaxError: Expected COMPLETE at the end of the statement

Sample 4: Invalid Task Name (Task7)
DO Task7 IF a == b COMPLETE
Expected Error:
SyntaxError: Invalid TASK_NAME: Task7

Sample 5: Extra Token After COMPLETE
DO Task1 IF a == b COMPLETE ExtraToken
Expected Error:
SyntaxError: Unexpected token: IDENTIFIER: ExtraToken

How to Run:
Python 3.x installed on your system.
Clone this repository.
Run the parser with the shell script:
./run_parser.sh
The script processes each input file. Tokens are saved to tokens.txt. The parser validates the syntax and outputs the AST or error messages.

Error Handling: 
Only Task1, Task2, Task3, and Task4 are valid.
Ensure every task ends with COMPLETE.
Avoid appending extra tokens after COMPLETE.
Missing comparators in the IF statement are invalid.
Make sure no misplaced tokens are present in the input.

Team Information: 
Mst Nayma: mzn2002

Demo Video: https://youtu.be/E61bSRIXXDI




